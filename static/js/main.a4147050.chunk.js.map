{"version":3,"sources":["Components/Button/Button.styled.jsx","Components/Button/Button.jsx","Components/FeedbackOptions/FeedbackOptions.styled.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Title.jsx","Components/Statistics/StatsItem.jsx","Components/Statistics/Statistics.styled.jsx","Components/Statistics/Statistics.jsx","Components/Section/Section.styled.jsx","Components/Section/Title.jsx","Components/Section/Section.jsx","Components/NotificationMessage/NotificationMessage.styled.jsx","Components/NotificationMessage/NotificationMessage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","VoteButton","str","name","onClick","id","type","toUpperCase","slice","CustomOption","FeedbackOptions","options","onLeaveFeedback","map","option","CustomTitle","Title","CustomItem","StatsItem","value","Container","Statistics","good","neutral","bad","total","positivePercentage","CustonSection","Section","title","children","CustomNotify","NotificationMessage","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","isVoted","e","target","prevState","Math","ceil","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4147050.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nconst Button = styled.button`\r\n  width: 70px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n\r\n  &:active {\r\n    background-color: #4850c0;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst VoteButton = ({ name, onClick, id }) => {\r\n  const ucFirst = str => str[0].toUpperCase() + str.slice(1);\r\n  return (\r\n    <Button type=\"button\" key={id} id={id} onClick={onClick}>\r\n      {ucFirst(name)}\r\n    </Button>\r\n  );\r\n};\r\n\r\nVoteButton.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default VoteButton;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomOption = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 300px;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  border-radius: 5px;\r\n  background-color: #808080;\r\n`;\r\n\r\nexport default CustomOption;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport VoteButton from 'Components/Button';\r\nimport CustomOption from './FeedbackOptions.styled';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <CustomOption>\r\n      {options.map(option => (\r\n        <VoteButton\r\n          key={option.name}\r\n          name={option.name}\r\n          id={option.name}\r\n          onClick={onLeaveFeedback}\r\n        />\r\n      ))}\r\n    </CustomOption>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      onLeaveFeedback: PropTypes.func,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled/macro';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CustomTitle = styled.h2`\r\n  font-size: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction Title({ name }) {\r\n  return <CustomTitle>{name}</CustomTitle>;\r\n}\r\n\r\nTitle.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled/macro';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CustomItem = styled.p`\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  &:last-child {\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nconst StatsItem = ({ name, value }) => {\r\n  return (\r\n    <CustomItem>\r\n      {name}: {value}\r\n    </CustomItem>\r\n  );\r\n};\r\n\r\nStatsItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default StatsItem;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst Container = styled.div`\r\n  background-color: #bebdbd;\r\n  width: 300px;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Title from './Title';\r\nimport StatsItem from './StatsItem';\r\nimport Container from './Statistics.styled';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <Container>\r\n      <Title name=\"Statistics\" />\r\n      <StatsItem name=\"Good\" value={good}></StatsItem>\r\n      <StatsItem name=\"Neutral\" value={neutral}></StatsItem>\r\n      <StatsItem name=\"Bad\" value={bad}></StatsItem>\r\n      <StatsItem name=\"Total\" value={total()}></StatsItem>\r\n      <StatsItem\r\n        name=\"Positive feedback\"\r\n        value={total() && positivePercentage() + '%'}\r\n      ></StatsItem>\r\n    </Container>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n  positivePercentage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustonSection = styled.section`\r\n  margin: 20px;\r\n`;\r\n\r\nexport default CustonSection;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled/macro';\r\n\r\nconst CustomTitle = styled.h1`\r\n  font-size: 24px;\r\n  margin: 20px auto;\r\n`;\r\n\r\nfunction Title({ name }) {\r\n  return <CustomTitle>{name}</CustomTitle>;\r\n}\r\n\r\nTitle.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CustonSection from './Section.styled';\r\nimport Title from './Title';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <CustonSection>\r\n      <Title name={title} />\r\n      {children}\r\n    </CustonSection>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nconst CustomNotify = styled.strong`\r\ncolor: red;\r\nfont-weight: 700;\r\n`;\r\n\r\nexport default CustomNotify;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CustomNotify from './NotificationMessage.styled';\r\n\r\nconst NotificationMessage = ({ message }) => {\r\n  return <CustomNotify>{message}</CustomNotify>;\r\n};\r\n\r\nNotificationMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default NotificationMessage;\r\n","import { useState } from 'react';\nimport FeedbackOptions from 'Components/FeedbackOptions';\nimport Statistics from 'Components/Statistics';\nimport Section from 'Components/Section';\nimport NotificationMessage from 'Components/NotificationMessage';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleClick = e => {\n    switch (e.target.id) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    const rez = Math.ceil((100 * good) / total);\n    return rez;\n  };\n\n  const options = [{ name: 'good' }, { name: 'neutral' }, { name: 'bad' }];\n  const isVoted = countTotalFeedback();\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions options={options} onLeaveFeedback={handleClick} />\n\n      {isVoted ? (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback}\n          positivePercentage={countPositiveFeedbackPercentage}\n        />\n      ) : (\n        <NotificationMessage message=\"No feedback given\" />\n      )}\n    </Section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}